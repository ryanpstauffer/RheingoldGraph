// RheingoldGraph gRPC and Protocol Buffer definitions.
syntax = "proto3";

// import magenta protobuf definitions (copied locally)
import "music.proto";

// option java_multiple_files = true;
// option java_package = "ex.grpc";

package rheingoldgraph;
 
// RheingoldGraph service definition.
service RheingoldGraph {
  // Get a summary of musical information stored in our graph.
  rpc GetSummary (SummaryRequest) returns (GraphSummary) {}

  // Get a sequence of ProtoBuf Notes from a Line 
  rpc GetLine (LineRequest) returns (stream tensorflow.magenta.Note) {}

  // Remove a line and all associated musical content
  rpc DropLine (LineRequest) returns (DropResponse) {}

  // Add lines in the graph from an XML file
  rpc AddLinesFromXML (XMLRequest) returns (AddResponse) {}

  // Search lines in the graph by Header Metadata
  rpc SearchLines (HeaderMetadata) returns (stream Line) {} 

  // Add Line
  rpc AddLine (Line) returns (LineSummary) {}
}

// -------------------------------------
// Requests
// -------------------------------------

// The Summary request message containing a line name (optional).
message SummaryRequest {
  string line = 1;
}

message LineRequest {
  string name = 1;
  int32 excerpt_length = 2;
}

message XMLRequest {
  bytes xml = 1;
  string piece_name = 2;
}

message HeaderMetadata {
  string created_date = 1;
  string composer = 2;
  int32 session_id = 3;
}

// -------------------------------------
// Responses
// -------------------------------------

// The Graph Summary reponse containing a summary of musical
// information stored in the graph
message GraphSummary {
  int32 total_vertices = 1;
  int32 total_edges = 2;
  int32 num_lines = 3; 
  repeated LineSummary lines = 4; 
}

// Summary information for a single line.
message LineSummary {
  string name = 1;
  int32 vertices = 2;
}

// Response for delete
message DropResponse {
  string name = 1;
  bool success = 2;
}

// Response for add 
message AddResponse {
  string name = 1;
  bool success = 2;
  int32 notes_added = 3;
}

// Representation of a musical line
message Line {
  string name = 1;
  repeated LineNote notes = 2;
  HeaderMetadata header = 3;
}

// Representation of a Symbolic Note
// TODO(ryan): Improve naming, clarify between this and playable Notes
message LineNote {
  string name = 1;
  int32 length = 2;
  int32 dot = 3; 
}

